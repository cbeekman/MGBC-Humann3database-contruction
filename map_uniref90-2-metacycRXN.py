from collections import defaultdict



#----------------------------------INPUT/OUTPUT FILES (FORMAT TAB-DELIMITED) ----------------------------------------------------------------------------------------------------------------------------

uniref2ecFILE = "intermediate-files/map_uniref90-2022-1_level4ec_filtered_tabs.txt"   # mapping of UniRef90 ID's to EC#'s (generated with map_uniref90-2-EC.sh script)
#uniref2ecFILE = "test1.txt"

ec2metacycFILE = "intermediate-files/map_level4ec_metacyc-RXN_tabs.txt"               # mapping of metacycRXN's to EC#'s (generated by reformatting the existing metacycRXN to name mapping file from humann3)
#ec2metacycFILE = "test2.txt"

outFILE = "map_uniref90-2022-1_metacycRXN.txt"                # final output file with mapping of all UniRef90 ID's per metacycRXN

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



#---------------------------------DEFINE FUNCTIONS FOR LOADING AND MANIPULATING MAPPING FILES AS DICTIONARIES--------------------------------------------------------------------------------------------


def load_dict(file):          # Loads tab-sep file into dictionary uses 1st column (unirefID/RXN which are unique) and the 2nd column (EC#s, not unique) as values
  my_dict = defaultdict(list)
  with open(file) as f:
    for line in f:
      line = line.strip()
      cols = line.split("\t")
      key = cols[0]
      values = cols[1:]
      my_dict[key] = values
  return my_dict


def invert_dict(my_dict):             # Inverts keys and values of a dictionary 
  inv_dict = defaultdict(list)        # (assigns all keys containing the same value as values in a new dictionary using the common value as the new key)
  for key, values in my_dict.items():
    for value in values[:]:
      inv_dict[value].append(key)
  return inv_dict


def merge_dicts(my_dict1, my_dict2):   # Merges 2 Dictionaries that share common keys into a new dictionary
  obj = defaultdict(list)              # (NOTE: Uses keys in dictionary1 and pulls values from dictionary2 that share a common key, will exclude items unique to dictionary2) 
  for key, values in my_dict1.items():
    obj[key].append(values)
    obj[key].append(my_dict2[key])
  return dict(obj)

      


ec2uniref_dict = invert_dict(load_dict(uniref2ecFILE))  # load uniref-2-EC mapping file as dictionary and invert key-value assignments
ec2metacyc_dict = invert_dict(load_dict(ec2metacycFILE)) # # load metacycRXN-2-EC mapping file as dictionary and invert key-value assignments

print "loaded mapping files and inverted keys-values"


merged_dict = merge_dicts(ec2uniref_dict, ec2metacyc_dict) # merge ec2uniref and ec2metacyc dictionaries using common EC values

print "merged mapping files successfully"




out_dict = defaultdict(list)
NO_RXN = []

for key, values in merged_dict.items():   # Reformat merged dictionary for final output by making new dictionary with RXN's as keys and uniref ID's as values 
  if len(values[1]) > 0:
    for rxn in values[1]:
      for id in values[0]:
        out_dict[rxn].append(id)
  else:
    for id in values[0]:
      out_dict["UNMATCHED"].append(id)

print "generated new mapping"
#print(out_dict)



with open(outFILE, "w") as output:        # Write final output to file as uniref-2-metacycRXN mapping file for use in humann3 custom pathway pipeline 
  for key, values in out_dict.items():
    unirefs = ""
    rxn = str(key)

    for id in values:
      unirefs += id + "\t"
    output.write("%s\t%s\n" % (rxn,unirefs))

print "wrote new mapping to file"    
